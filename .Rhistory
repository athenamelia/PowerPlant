sd=mixture$sigma[i])
}
return(mix_dist)
}
mixture_dist <- gaussian.clusters(mixture, c(1,2))
gaussian.clusters <- function(mixture, cluster.number) {
mix_dist <- 0
for (i in 1:length(cluster.number)) {
mix_dist <- mix_dist + mixture$lambda[i] * dnorm(x,mean=mixture$mu[i],
sd=mixture$sigma[i])
}
return(mix_dist)
}
mixture_dist <- gaussian.clusters(mixture, c(1,2))
mixture_dist
gaussian.clusters(mixture, c(1,2))
ggplot(data = ds) +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture, c(1,2)))
library(mosaic)
library(tidyverse)
library(mosaic)
library(mdsr)
library(mixtools)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(mixtools)
geyser2 <- normalmixEM(faithful$eruptions, k = 2, maxit = 10000, epsilon = 0.0001)
summary(geyser2)
best_fit <- function(x, mixture) {
result <- map_dbl(x,
function(x) {
sum(
mixture$lambda *
dnorm(x, mean = mixture$mu, sd = mixture$sigma)
)
}
)
return(result)
}
best_fit(3, geyser2)
gaussian.clusters <- function(x, mixture, cluster.number) {
mix_dist <- 0
for (i in 1:length(cluster.number)) {
mix_dist <- mix_dist + mixture$lambda[i] * dnorm(x,mean=mixture$mu[i],
sd=mixture$sigma[i])
}
return(mix_dist)
}
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls")
curve(gaussian.clusters(x, mixture, c(1, 2)), add = TRUE)
gaussian.clusters <- function(mixture, cluster.number) {
mix_dist <- 0
for (i in 1:length(cluster.number)) {
mix_dist <- mix_dist + mixture$lambda[i] * dnorm(x,mean=mixture$mu[i],
sd=mixture$sigma[i])
}
return(mix_dist)
}
ds <- ds %>% mutate(
mixture_dist = gaussian.clusters(mixture, c(1,2))
)
ggplot(data = ds) +
geom_density(mapping = aes(x = mixture_dist, y = ..density..), color = "red")
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls")
curve(gaussian.clusters(x, mixture, c(1, 2)), add = TRUE)
gaussian.clusters <- function(x, mixture, cluster.number) {
mix_dist <- 0
for (i in 1:length(cluster.number)) {
mix_dist <- mix_dist + mixture$lambda[i] * dnorm(x,mean=mixture$mu[i],
sd=mixture$sigma[i])
}
return(mix_dist)
}
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls")
curve(gaussian.clusters(x, mixture, c(1, 2)), add = TRUE)
gaussian.clusters <- function(x, mixture) {
result <- map_dbl(x,
function(x) {
sum(mixture$lambda * dnorm(x, mean = mixture$mu, sd = mixture$sigma)
)
}
)
return(result)
}
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture))
gaussian.clusters <- function(x, mixture, cluster.number) {
mix_dist <- 0
for (i in 1:length(cluster.number)) {
mix_dist <- mix_dist + mixture$lambda[i] * dnorm(x,mean=mixture$mu[i],
sd=mixture$sigma[i])
}
return(mix_dist)
}
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls")
curve(gaussian.clusters(x, mixture, c(1, 2)), add = TRUE)
library(mixtools)
mixture <- normalmixEM(ds$snoq, k = 2, maxit = 1000, epsilon = 0.0001)
summary(mixture)
names(mixture)
gaussian.clusters <- function(x, mixture) {
result <- map_dbl(x,
function(x) {
sum(mixture$lambda * dnorm(x, mean = mixture$mu, sd = mixture$sigma)
)
}
)
return(result)
}
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture))
mixture <- normalmixEM(ds$snoq, k = 5, maxit = 1000, epsilon = 0.0001)
summary(mixture)
names(mixture)
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture))
gaussian.clusters <- function(x, mixture) {
result <- map_dbl(x,
function(x) {
sum(mixture$lambda * dnorm(x, mean = mixture$mu, sd = mixture$sigma)
)
}
)
return(result)
}
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(0, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture))
mixture <- normalmixEM(ds$snoq, k = 5, maxit = 1000, epsilon = 0.0001)
summary(mixture)
names(mixture)
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture))
library(mixtools)
mixture_dist2 <- normalmixEM(ds$snoq, k = 2, maxit = 1000, epsilon = 0.0001)
summary(mixture)
names(mixture)
gaussian.clusters <- function(x, mixture) {
result <- map_dbl(x,
function(x) {
sum(mixture$lambda * dnorm(x, mean = mixture$mu, sd = mixture$sigma)
)
}
)
return(result)
}
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture))
mixture_dist5 <- normalmixEM(ds$snoq, k = 5, maxit = 1000, epsilon = 0.0001)
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture))
gaussian.clusters <- function(x, mixture) {
result <- map_dbl(x,
function(x) {
sum(mixture$lambda * dnorm(x, mean = mixture$mu, sd = mixture$sigma)
)
}
)
return(result)
}
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture_dist2))
library(mosaic)   # Load additional packages here
library(tidyverse)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
snoqualmie <- scan(
"http://www.stat.washington.edu/peter/book.data/set1",
skip = 1
)
snoq <- snoqualmie[snoqualmie > 0]
ds <- tibble(snoq)
rm(snoq)
head(ds)
library(mixtools)
mixture_dist2 <- normalmixEM(ds$snoq, k = 2, maxit = 1000, epsilon = 0.0001)
summary(mixture)
library(mixtools)
mixture_dist2 <- normalmixEM(ds$snoq, k = 2, maxit = 1000, epsilon = 0.0001)
summary(mixture_dist2)
names(mixture_dist2)
gaussian.clusters <- function(x, mixture) {
result <- map_dbl(x,
function(x) {
sum(mixture$lambda * dnorm(x, mean = mixture$mu, sd = mixture$sigma)
)
}
)
return(result)
}
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture_dist2))
mixture_dist5 <- normalmixEM(ds$snoq, k = 5, maxit = 1000, epsilon = 0.0001)
ggplot(data = ds) +
geom_histogram(mapping = aes(x = snoq, y = ..density..), color = "grey") +
xlab("Precipitation (1/100 inch)") +
xlim(1, 150) +
ggtitle("Precipitation in Snoqualmie Falls") +
stat_function(fun = gaussian.clusters, color = "red", args = list(mixture = mixture_dist5))
x <- c(0, 1, 2, 3, 4, 5)
n <- c(168, 32, 16, 6, 1, 0)
sum(n)
nobs <- sum(n[-1])
nobs
eps <- 0.0001
xbarobs <- sum(x * n) / nobs
xbarobs
lambdahat <- sum(x*n)/sum(n)
lambdahat
vals <- 0:5
fitted <- sum(n) * dpois(vals, lambda = lambdahat)
fitted
x <- c(0, 1, 2, 3, 4, 5)
n <- c(168, 32, 16, 6, 1, 0)
sum(n)
# EM function with iteration and starting point
em_estimate <- function(iteration = integer(), param = c()) {
num_param <- length(param)
paramold <- rep(0, num_param)   # not the true values
for (i in 1:iteration) {
iter <- 0
while (sum(abs(param - paramold)) > eps) {
iter <- iter + 1
paramold <- param
param[2] <- paramold[2] * exp(-paramold[1]) + nobs
param[1] <- nobs * xbarobs / paramold[2]
if (iter %% 5 == 1) {
cat("iter=", iter, "  param1=", param[1],
"  param2=", param[2],"\n", sep = "")
}
}
}
non_susceptible <- (sum(n) - param[2])
fitted_em <- param[2] * dpois(vals, lambda = param[1])
fitted_em[1] <- fitted_em[1] + non_susceptible
return(list(param, fitted_em))
}
em_estimate(1000, c(1, 2))
# EM function with iteration and starting point
em_estimate <- function(iteration = integer(), param = c()) {
num_param <- length(param)
paramold <- rep(0, num_param)   # not the true values
for (i in 1:iteration) {
iter <- 0
while (sum(abs(param - paramold)) > eps) {
iter <- iter + 1
paramold <- param
param[2] <- paramold[2] * exp(-paramold[1]) + nobs
param[1] <- nobs * xbarobs / paramold[2]
if (iter %% 5 == 1) {
cat("iter=", iter, "  param1=", param[1],
"  param2=", param[2],"\n", sep = "")
}
}
}
non_susceptible <- (sum(n) - param[2])
fitted_em <- param[2] * dpois(vals, lambda = param[1])
fitted_em[1] <- fitted_em[1] + non_susceptible
return(list(param, fitted_em))
}
em_estimate(10000, c(1, 2))
em_estimate(10000, c(10, 20))
em_estimate(10000, c(15, 40))
em_estimate(10000, c(1, 2))
em_estimate(1000, c(1, 2))
em_estimate(100, c(1, 2))
gaussian.clusters <- function(x, mixture) {
mix_dist <- 0
for (i in 1:length(mixture$lambda)) {
mix_dist <- mix_dist + mixture$lambda[i] * dnorm(x,mean=mixture$mu[i],
sd=mixture$sigma[i])
}
return(mix_dist)
}
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls")
curve(gaussian.clusters(x, mixture), add = TRUE)
gaussian.clusters <- function(x, mixture) {
mix_dist <- 0
for (i in 1:length(mixture$lambda)) {
mix_dist <- mix_dist + mixture$lambda[i] * dnorm(x,mean=mixture$mu[i],
sd=mixture$sigma[i])
}
return(mix_dist)
}
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls")
curve(gaussian.clusters(x, mixture_dist2), add = TRUE)
hist
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls", xlim = c(1,150))
curve(gaussian.clusters(x, mixture_dist2), add = TRUE)
plot(hist(ds$snoq,breaks=101),col="grey",border="grey",freq=FALSE,
xlab="Precipitation (1/100 inch)",main="Precipitation in Snoqualmie Falls", xlim = c(1,150))
curve(gaussian.clusters(x, mixture_dist2), add = TRUE)
usethis::git_sitrep()
devtools::install_github()
usethis::create_from_github(fork = TRUE)
usethis::browse_github_pat()
usethis::browse_github_pat()
usethis::browse_github_pat()
usethis::browse_github_pat()
usethis::edit_r_environ()
usethis::edit_r_environ()
usethis::git_sitrep()
usethis::git_sitrep()
usethis::git_sitrep()
update.packages(lib.loc = NULL, repos = getOption("repos"),
contriburl = contrib.url(repos, type),
method, instlib = NULL,
ask = TRUE, available = NULL,
oldPkgs = NULL, …, checkBuilt = FALSE,
type = getOption("pkgType"))
update.packages(lib.loc = NULL, repos = getOption("repos"),
contriburl = contrib.url(repos, type),
method, instlib = NULL,
ask = TRUE, available = NULL,
oldPkgs = NULL,... , checkBuilt = FALSE,
type = getOption("pkgType"))
update.packages(lib.loc = NULL, repos = getOption("repos"),
contriburl = contrib.url(repos, type),
method, instlib = NULL,
ask = TRUE, available = NULL,
oldPkgs = NULL, checkBuilt = FALSE,
type = getOption("pkgType"))
install.packages(c("backports", "broom", "callr", "car", "cli", "clipr", "coda", "covr", "cpp11", "data.table", "devtools", "dials", "digest", "discrim", "DT", "e1071", "foreach", "Formula", "furrr", "future", "generics", "ggdendro", "globals", "glue", "gtsummary", "htmlwidgets", "igraph", "iterators", "jsonlite", "kableExtra", "KernSmooth", "labeling", "labelled", "lava", "lhs", "lme4", "MASS", "matrixStats", "mgcv", "modeldata", "mosaic", "mosaicCore", "mosaicData", "nlme", "NLP", "openssl", "openxlsx", "parsnip", "partykit", "processx", "ps", "quantreg", "questionr", "R6", "RcppArmadillo", "readr", "recipes", "rlang", "rmarkdown", "rsample", "RSQLite", "rticles", "segmented", "shinybusy", "sp", "SQUAREM", "statmod", "stringdist", "stringi", "survival", "testthat", "tibble", "tidyr", "tinytex", "usethis", "V8", "vctrs", "withr", "workflows", "xfun"))
usethis::use_git()
usethis::git_sitrep()
usethis::git_sitrep()
usethis::browse_github_pat()
usethis::edit_r_environ()
usethis::git_sitrep()
usethis::git_sitrep()
remotes::install_github("athenamelia/DiscGolf")
usethis::git_sitrep()
library(mosaic)   # Load additional packages here
library(tidyverse)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
power_plant <- readRDS(file = "data.Rds")
power_plant %>%
group_by(primary_fuel) %>%
summarize(total_cap = round(sum(capacity_mw), 2)) %>%
arrange(desc(total_cap)) %>%
select(primary_fuel, total_cap) %>%
knitr::kable()
power_plant %>%
group_by(primary_fuel) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(primary_fuel, total_cap) %>%
knitr::kable()
power_plant %>%
group_by(country_long) %>%
summarize(total_cap = sum(capacity_mw)) %>%
arrange(desc(total_cap)) %>%
select(country_long, total_cap) %>%
head(6) %>%
knitr::kable()
power_plant %>%
group_by(country_long) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(country_long, total_cap) %>%
head(6) %>%
knitr::kable()
power_plant<- power_plant %>%
mutate(capacity_group = ifelse(capacity_mw < 100, 'very low',
ifelse(capacity_mw < 5000, 'low',
ifelse(capacity_mw < 10000, "medium", "high"))))
ggplot(
data = power_plant,
aes(x = longitude,
y = latitude,
color = capacity_group)
) +
geom_point(alpha = 0.5)
ggplot(
data = power_plant,
aes(x = longitude,
y = latitude,
color = primary_fuel)
) +
geom_point(alpha = 0.5)
# categorize capacity_mw
power_plant<- power_plant %>%
mutate(capacity_group = case_when(
capacity_mw < 100 ~ "very low",
capacity_mw < 5000 ~ "low",
capacity_mw < 10000 ~ "medium",
capacity_mw > 10000 ~ "high"))
# maps
ggplot(
data = power_plant,
aes(x = longitude,
y = latitude,
color = capacity_group)
) +
geom_point(alpha = 0.5)
ggplot(
data = power_plant,
aes(x = longitude,
y = latitude,
color = primary_fuel)
) +
geom_point(alpha = 0.5)
View(power_plant)
ggplot() +
geom_path(data = power_plant, aes(x = longitude, y = latitude, color=factor(capacity_group)))
primary_fuel
power_plant
power_plant %>%
group_by(primary_fuel) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(primary_fuel, total_cap) %>%
knitr::kable()
power_plant %>%
group_by(country_long) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(primary_fuel, total_cap) %>%
knitr::kable()
power_plant %>%
group_by(country_long) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(country_long, total_cap) %>%
knitr::kable()
power_plant %>%
group_by(country_long) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(country_long, total_cap) %>%
head(6) %>%
knitr::kable()
power_plant %>%
group_by(country_long) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(country_long, total_cap) %>%
knitr::kable()
power_plant %>%
group_by(country_long) %>%
summarize(total_cap = round(sum(capacity_mw))) %>%
arrange(desc(total_cap)) %>%
select(country_long, total_cap) %>%
head(10) %>%
knitr::kable()
power_plant
usethis::proj_sitrep()
usethis::git_sitrep()
PowerPlant
library(PowerPlant)
PowerPlant
usethis::use_readme_rmd()
usethis::use_vignette("DiscGolf")
usethis::use_github_action("check-standard")
remotes::install_github("athenamelia/DiscGolf")
remotes::install_github("athenamelia/PowerPlant")
usethis::use_github_action("check-standard")
remotes::install_github("YOURGITHUBNAME/DiscGolf")
remotes::install_github("athenamelia/PowerPlant")
library(PowerPlant)
remotes::install_github("YOURGITHUBNAME/DiscGolf")
remotes::install_github("athenamelia/PowerPlant")
devtools::install_github("athenamelia/PowerPlant")
remotes::install_github("athenamelia/PowerPlant")
